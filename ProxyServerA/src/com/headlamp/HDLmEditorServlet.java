package com.headlamp;
import static com.headlamp.HDLmAssert.HDLmAssertAction;

import java.io.IOException;
import java.util.ArrayList;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.http.HttpStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * This servlet provides all of the functions needed to support the
 * editors 
 *
 * This servlet provides all of the functions needed to support the
 * editors. That even includes handling file execution requests
 * in some cases. Of course, no actual file code is executed. 
 * However, the function of the file code is emulated/simulated
 * as need be.
 *
 * @version 1.0
 * @author Peter
 */
/* This is not a purely static class and instances of this class
   can definitely be created */
public class HDLmEditorServlet extends HttpServlet {
	/* The next statement initializes logging to some degree. Note that 
     having the slf4j jars and the log4j jars in the classpath also
     plays some role in logging initialization. */
  private static final Logger LOG = LoggerFactory.getLogger(HDLmEditorServlet.class);
	/* The next method handles all of the inbound (GET) requests 
	   generated by the editors. Each request is checked and 
	   handled as need be. */	 
  @Override
  protected void doGet(HttpServletRequest request, 
  		                 HttpServletResponse response)
                       throws ServletException, IOException {	  
  	HDLmJetty.editorGet(request, response);
  }
  /* The next method handles all of the inbound (POST) requests 
     generated by the editors. Each request is checked and handled 
     as need be. */	 
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
	               throws ServletException, IOException { 
		HDLmJetty.editorPost(request, response, null);	  
	}
	/* This method takes an editor type value and converts it to a string
	   for use in building an error message. The editor type is converted
		 to a string. The string is then converted to lowercase. The first
		 character of the string is then converted to uppercase. The final
		 string is then returned to the caller. */
	protected static String getTypeEditor(HDLmEditorTypes editorType) {
 	  String  editorTypeString;
	  /* We would like to test for and reject null values and/or invalid 
		 	 values passed to this routine. However, this is part of error
			 handling. It should probably not fail when it is needed to issue
			 an error message. */ 
	  if (editorType == null) {
			HDLmLogMsg.buildLogMsg(HDLmLogLevels.ERROR, "Null Value", 26, "editorType");
			return "Null Editor Type";    	
	  }
	  /* Check if the editor type is invalid */
	  if (editorType == HDLmEditorTypes.NONE) {
	 	  HDLmLogMsg.buildLogMsg(HDLmLogLevels.ERROR, "Invalid Value", 33, "editorType");
			return "Invalid Editor Type";      	
	  }
		/* Build the final editor type string */
	  editorTypeString = editorType.toString().toLowerCase();
	  return HDLmString.ucFirst(editorTypeString);
	}
	/* This routine handles all post requests meant for proxy program.
	   The original proxy program is no longer in use. This routine
	   emulates (simulates) the original proxy program. The caller
	   specifies the request type and any other needed information 
	   (such as userids and passwords). This routine returns a JSON 
	   string that can be passed back to the client. */
	protected static String simulateProxy(HttpServletRequest request, HttpServletResponse response,
			                                  String requestType, String Url,
                                        String useridStr, String passwordStr,
                                        String typeStr, String extraInfo) {
	  return simulateProxy(request, response, 
	  		                 requestType, Url, useridStr, passwordStr, 
	  		                 typeStr, extraInfo, HDLmReportErrors.REPORTERRORS);
	}
	protected static String simulateProxy(HttpServletRequest request, HttpServletResponse response, 
			                                  String requestType, String Url,
			                                  String useridStr, String passwordStr,
			                                  String typeStr, String extraInfo,
			                                  HDLmReportErrors reportErrors) {
		/* Check if the servlet request passed by the caller is null */
		if (request == null) {
			String  errorText = "Servlet request passed to simulateProxy is null";
			throw new NullPointerException(errorText);
		}
		/* Check if the servlet response passed by the caller is null */
		if (response == null) {
			String  errorText = "Servlet response passed to simulateProxy is null";
			throw new NullPointerException(errorText);
		}
		/* Check if the request type string passed by the caller is null */
		if (requestType == null) {
			String  errorText = "Request type string passed to simulateProxy is null";
			throw new NullPointerException(errorText);
		}
		HDLmApacheResponse          apacheResponse;
		HDLmHttpTypes               httpType;
		String                      outJson = null;
		/* Set a boolean (not a Boolean) based on whether debug logging 
       is enabled or not. This is used to avoid the overhead of
       logging, when debug logging is not enabled. */
	  boolean   logIsDebugEnabled = LOG.isDebugEnabled();
		/* Report some information passed to this routine */
		if (logIsDebugEnabled) {
		  LOG.info("Request type in simulateProxy - " + requestType);
		}
	  /* Add the Access-Control-Allow-Origin header. This header (in the
	     response) allows the browser to handle the output without an
	     error. */
	  HDLmJetty.handleResponseAllowAllOrigins(request, response); 			                             
		/* Handle each request type */
		switch (requestType) {
		  case "defines":
		  	outJson = HDLmDefines.getDefines();
		  	break;		
		  case "config":
		  	outJson = HDLmConfig.getConfigs();
		  	break;	
		  case "matchInfo": {
		  	String  overallName = extraInfo;
		  	outJson = HDLmRule.getMatchInfo(overallName);
		  	break;
		  }
		  case "statsInfo": {
		  	String  overallName = extraInfo;
		  	outJson = HDLmEvent.getStatsInfo(overallName);
		  	break;
		  }
		  case "styles":
		  	outJson = HDLmHtml.getStyles();
		  	break;	
		  case "URL":
				/* Report some information passed to this routine */
		  	if (logIsDebugEnabled) {
					LOG.debug("URL in simulateProxy - " + Url);
					LOG.debug("Type string in simulateProxy - " + typeStr);
		  	}
		  	/* Convert the HTTP reqeust type string to an enum value. This
		  	   step might fail. Of course, it should not fail. */  
		  	httpType = HDLmHttpTypes.valueOfString(typeStr);
		  	if (httpType == HDLmHttpTypes.NONE) {
		      String   errorText = typeStr;
		      HDLmLogMsg.buildLogMsg(HDLmLogLevels.ERROR, "Invalid Type Request", 30, errorText);  	
		      break;
		  	}
		  	if (httpType == HDLmHttpTypes.GET) {
		  	  apacheResponse = HDLmCurlApache.runCurl(Url, 
		  	  		                                    useridStr, 
		  	  		                                    passwordStr, 
		  	  		                                    httpType);
		    	outJson = apacheResponse.getStringContent();
		    	/* Get and check the response code */
		    	int   responseCode = apacheResponse.getStatusCode();
					if (responseCode != HttpStatus.SC_OK) {	 ;
						try {
							/* The response code may show that the URL was not found. In this case, 
							   we will send a special error message back to the client. In other cases,
							   we will send a generic error message back to the client. We use an HTTP
							   code of 400 to send the failure message back to the client, because
							   a response code of -1 causes fetch to fail. */
							if (responseCode == -1) {
								String  errorText = HDLmDefines.getString("HDLMSIMULATEPROXYFAILURE") + 
										                " " + 
										                HDLmDefines.getString("HDLMURLFAILEDTEXT");
								String  errorMessage = apacheResponse.getErrorMessage();
								if (errorMessage != null)  
									errorText = errorText + ": " + errorMessage; 
								response.sendError(400, errorText);
							} 
							else {
								response.sendError(responseCode, 
										               HDLmDefines.getString("HDLMSIMULATEPROXYERROR"));
							}							
							if (logIsDebugEnabled) {
							  LOG.debug("In HDLmEditorServlet.simulateProxy after sendError");
							  LOG.debug("Response code - " + ((Integer) apacheResponse.getStatusCode()).toString());
							}
						}
						catch (IOException ioException) {
							if (Url != null)
							  LOG.info("Url value - " + Url);
							LOG.info("IOException while executing sendError in simulateProxy");
							LOG.info(ioException.getMessage(), ioException);
							HDLmEvent.eventOccurred("IOException");
						}
					}
		    }
		  	else {
		  		ArrayList<String>   headerList = new ArrayList<String>();
		  		apacheResponse = HDLmCurlApache.runCurl(Url, useridStr, passwordStr, httpType,
				                                          headerList,
				                                          extraInfo,
				                                          null,
				                                          HDLmOutboundJson.OUTBOUNDJSONYES,
				                                          HDLmSkipAuth.SKIPAUTHNO,
				                                          HDLmReportErrors.REPORTERRORS);
		  		outJson = apacheResponse.getStringContent();
		  	}
		  	/* Write out some degging information to the log */
		  	if (logIsDebugEnabled) {
		  	  LOG.debug("In HDLmEditorServlet.simulateProxy");
		  	  LOG.debug("URL in simulateProxy - " + Url);
		  	  LOG.debug("Type string in simulateProxy - " + typeStr);
		  	  LOG.debug("Error message - " + apacheResponse.getErrorMessage());
		  	  LOG.debug("Response code - " + ((Integer) apacheResponse.getStatusCode()).toString());
		  	  String  outJsonLengthStr;
		  	  if (outJson != null) 
		  		  outJsonLengthStr = ((Integer) outJson.length()).toString();
		  	  else
		  		  outJsonLengthStr = "null";
		  	  LOG.debug("OutJson.length() in simulateProxy - " + outJsonLengthStr);
		  	}
		  	/* Report some information passed to this routine */
				if (logIsDebugEnabled) {
				  LOG.debug("In HDLmEditorServlet.simulateProxy");
				}
		  	break;	
	    /* Report an error if the request type did not match one of the expected choices */
	    default: 
	    	if (reportErrors == HDLmReportErrors.REPORTERRORS) {
	        String   errorText = String.format("Invalid request type (\"%s\") passed to this routine", 
	        		                               requestType);
	        HDLmLogMsg.buildLogMsg(HDLmLogLevels.ERROR, "Invalid Request", 29, errorText);
	    	}
		}
		return outJson;
	}	
}